$Id$

NOTES:
-- Displays the main members list, but sortable and filterable using JS.

INSTALL:
1) Extract the SortMember archive to the roster/addons/ directory on your site.

2) Go to the Roster Control Panel, manage addons, and click the SortMember
   installation icon.

3) The addon installs automatically. 

4) Click the new SortMember button in the pagebar to configure SortMember.

CONFIGURE:
1) Go to the SortMember configuration panel using the link in the Roster Control
   Panel

2) Change any options you want. Use the buttons on the left side to see more
   options.

3) Use the reset button at the top of the config page to reset to the settings
   as they were when you loaded the page.

4) Use the save button at the top of the config page to save the changes.

UNINSTALL:
1) Click the uninstall link in the config page.

2) Click OK to confirm the uninstall.

3) Delete the SortMember folder from your webserver.

USE:
Click one of this addon's buttons in the menu to view the sortable list.
It may take a couple of seconds to sort the full list; sorting a filtered list
is faster.

VERSION LOG:
0.3.0
-- Roster 1.8 compatibility
-- Added the honor page
-- Added serverside sorting support
-- Merged in AltMonitor

0.2.0
-- Inequality filters on date columns work in FF, work even better in Opera,
   and fail to work completely in IE. I'm not gonna fix this since it'd involve
   writing my own date parsing function, and there are limits.
-- Added inequality filtering. Currently supports <, >, <=, =<, >=, =>, == for
   number fields and == for string fields. Put the symbol at the beginning of
   the field.

0.1.0
-- Initial beta release.
-- Merged the AltMonitor framework with a couple of files from the roster 1x
   AdminPanel branch.

CREDITS / FILE BY FILE FUNCTION INFO
conf.php
	Some defines for the alt detection system, and the main/alt relation table
debug.php
	Main/Alt system debug mode
honorlist.php
	shows the honour attributes
index.php
	Wrapper file, called by Roster's addon.php. Uses the $_GET['action']
	parameter to decide which file to load
install.def.php
	Installer definition file. Read by the roster addon installer
memberlist.php
	Shows the standard memberlist, with guild rank, online times, guild note,
	professions.
statslist.php
	Shows character attributes like strength, stamina, etc.
update.php
	Wrapper for update_hook.php. Simulates a guild update on current data,
	so the main/alt relations can be updated.
update_hook.php
	Writes the Main/Alt table.
	
docs/install.txt
	by PleegWat.
	This file. Installation instructions, usage instructions, version log,
	todo info, credits/file overview.

inc/memberslist.php
	Originally roster's memberslist.php, significantly edited by PleegWat into
	a library for the later abandoned AdminPanel branch. Minor edits to make it
	work in an addon. More edits to reinsert support for serverside sorting,
	allowing this addon to replace the standard memberlist in roster
	completely.

js/sorttable.js
	Original sorting code by Stuard Langridge. I found this code at
	http://kryogenix.org/code/browser/sorttable/. The filtering code and
	the column show/hide code is all by PleegWat.

locale/deDE.php
	German localization
locale/enUS.php
	English localization
locale/esES.php
	Spanish localization
locale/frFR.php
	French localization

EDITING THE CODE
If you want to add more, similar member listings, or you want to change the
displays in the existing listings beyond what is possible from the config,
the following points are interesting:

- To create a new page, copy one of the memberlist/statslist/honorlist to a
  new file in the SortMembers directory. A file called mylist.php will be
  accessible as ?p=addon-SortMember-mylist
- The MOTD, honor/pvp overviews, and update info are all included from this
  list file.
- The query is fully defined in the list file, except for the order part.
  Delete the fields you don't use and add those you want to use additionally.
  Remember some of the fields are still used in the name popup.
- The columns are defined as elements of the FIELD array. This is the syntax:


$FIELD['name'] = array (
		// The FIELD key is the DB field to be displayed
	'lang_field' => 'name',
		// 'lang_field' is the localization key for the header. If the key
		// is invalid, it is printed in the header literally.
	'order'    => array( '`members`.`name` ASC' ),
		// 'order' contains the SQL for an ascending sort
	'order_d'    => array( '`members`.`name` DESC' ),
		// 'order_d' contains the SQL for a descending sort
	'value' => 'name_value',
		// 'value' is a callback to the function that draws this column. The
		// function should also be defined in the list file (except for the
		// name/class/level/honor value functions included in the lib).
		// It has two parameter, the DB row for the current player and the
		// db field name to be displayed.
	'jsort' => 'name',
		// 'jsort' is the field the javascript (clientside sorting) should sort
		// and filter on. This can be omitted if it's the same as the display
		// field, and should never occur together with 'value'
	'display' => 3,
		// 'display' generally refers to a config field. It determines if the
		// column is visible:
		// - 0 for force hidden (not drawn/passed to the client)
		// - 1 for default hidden (can be made visible if clientside sorting is
		//     active)
		// - 2 for default shown (can be made invisible if clientside sorting
		//     is active)
		// - 3 for force shown (always shown and cannot be hidden using JS)
);
