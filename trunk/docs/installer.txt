$Id$

Installer documentation
=======================

This installer requires a similar install file definition as DragonFly CMS, with
some important exeptions:
- No seperate index commands. Create, modify, or remove index entries like you
  would table columns, keys, or constraints in DF.
- No rollback data per query. Instead, call the BACKUP command for each table
  you want restored in case of an upgrade/uninstall failure. Any new tables you
  create are automatically deleted in rollback.
- A lot of different required variables to be set.


Creating the installer
===================
You should create a file called install.def.php with in it a class that is named
identical to your addon's install directory name.
This name will be refered to as your addon's basename.

var $active
	Boolean, set to true to activate this addon after installing, set to
	false if it has to be configured first.

var $hasconfig
	String, set to the profile name that holds the default config page, or
	leave empty for no configuration.

var $upgrades
	Array, values are strings, basenames of addons this can upgrade. The
	addon's own name should be in this as well.

var $version
	String, the current version of your addon. Needs to be compatible with
	php's version_compare(). Needs to be incremented on every update that
	includes a database update.

var $icon
	String, an icon to display for your addon in the addon management page in RosterCP
	Valid icons are from the Interface ImagePack

var $fullname
	String, the full name of the addon for display.

var $description
	String, used as a tooltip in serveral places.

var $credits
	Array(Array("name"=>name, "info"=>info), ...) Credits information.


It also should have 3 functions:

install()
	Here you can add all queries for a fresh install. No parameters. Return
	true on success, false on failure.

upgrade($oldbasename, $oldversion)
	Here you can add all queries for an upgrade.
	2 parameters:

	$oldbasename, the basename of the addon to upgrade from

	$oldversion, the version to upgrade from.
	Return true on success, false on failure.

	You should supply your own file to be called for upgrades of a Roster
	1.7.x addon since Roster cannot detect these addons.

uninstall()
	Here you should add all queries for an uninstall. No parameters.
	Return true on success, false on failure


Adding queries
==============
Queries are added to the install using the $installer functions.

$installer->add_query($sqlstring);
	Any SQL query

$installer->add_backup($table)
	Makes a temporary copy of a table and its contents that is put back in case of a rollback

$installer->add_drop($table)
	Have a table be dropped on rollback

$installer->add_config($sqlstring);
	Add config sql to `roster_addon_config` table
	"'id','config_name','config_value','form_type','config_type'"
	These entries will be used to build a config page through Roster's config page API


Creating/Editing menu entries
====================
There are 3 seperate functions for this.
Note the title should be unique per addon.

$installer->add_menu_button($title, $url, $active)
	Adds a menu button. Parameters:
	$title
		The localization key for the menu button's title.
	$url
		The url parameters this button should call the addon with
	$active
		Whether or not this button is initially active.

$installer->update_menu_button($title, $url, $active)
	Adds a menu button. Parameters:
	$title
		The localization key for the menu button's title. Used to identify
		the button, so should stay the same
	$url
		The url parameters this button should call the addon with.
	$active
		Whether or not this button is initially active.

$installer->remove_menu_button($title)
	Adds a menu button. Parameters:
	$title
		The localization key for the menu button's title.


Editing trigger registration
============================
There are 2 seperate functions to register/unregister for certain file uploads.
You can register yourself for any lua file.

$installer->add_trigger($file, $active)
	Register for an additional file. Parameters:
	$file
		The name of the addon (e.g. CharacterProfiler if you want your
		trigger to run if CharacterProfiler.lua is included in the update)
	$active
		Whether or not this trigger is initially active

$installer->remove_trigger($file)
	Unregister a file. Parameters:
	$file
		The name of the addon.
