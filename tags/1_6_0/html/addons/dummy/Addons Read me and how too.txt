WoW Roster v1.6.0 Addons Document
Readme updated December 20, 2005 by Mordon

You can view the open source project at http://wowprofilers.com

For corrections and/or suggestions - http://wowprofilers.com



------------------------------------
This Manual contains the following:
------------------------------------
- Basics of what is needed to run the addon's
- addon.php
- Required files and examples
- Optional files
- Breaking down the addon
	- menu.php
	- index.php
	- config.php
	- localization.php
	- default.css
	- trigger.php
- Optional Variable calls from addons.php


Thanks to:
http://wowprofilers.com (originally http://sourceforge.net/projects/wowprofiler)
And Everyone involved in the project.


------------------
Basics of a addon:
------------------
The following are required to run the Roster backend and to be able to run any addons.

- A web server (duh!) - Works fine on IIS, Apache, etc.
- MySQL 4.0.x or higher (it can be made to work with MySQL 3.x but it is NOT recommended. See forums for tips on how to do this)
- PHP 4.3.x or higher with GD2 and TTF(freetype is recommended) support enabled. PHP 5.0.x is recommended.

The addon system is designed so that you can mod the roster base without having to change to much of the base code as it changes a lot between version.
Hopefully with this system we be closer to having a drop in module system without having to mod a lot of the base files each time.
We will be constantly refining the system as we go along.

Please donot use php short tags in your php files also. ie <?  ?>  use <?php  ?> instead as this can break systems with short tags set to off.


------------------
addon.php:
------------------
Ok so here we are, working on a addon and you're thinking, "How am I going to get the conf and language variables to use in my addon?"
Well our answer to that is addons.php, this file passes all the variables to your addon for whatever you need.

Features:

1) It uses output buffering, which means all the output is stored in a variable that is sent to the browser
2) Don't have to include roster's conf.php
3) Don't have to include own conf.php
4) Don't have to include css or worry about which template is running
5) Making an addon is about 15X easier now.
6) conf.php, default.css, and localization.php are OPTIONAL.


What it does:

1) Includes all roster conf.php variables for you to use.
2) Includes all roster wowdb variables for your use.
3) Includes all roster language variables for you
4) Includes all roster css styles
5) You automatically have the roster header, footer and menu included to your files.
   - These can be disabled if needed, more below...

Best of all this is transparent to you!


------------------
Required files:
------------------
Basically there are a few files that you will need in the addon directory.
- First, you will need to create a file called menu.php
- Second, you will need to create a file called index.php

Note:  You cannot rename them to something else as they are used by addons.php.
       Both files are used to put you addon in the menu automatically.

Example files:  (These files can be found in the dummy folder in the addons section.)

roster/addons/dummy (example path)

These files are in the dummy file above

menu.php
    (this file adds your addon to the roster menu)

index.php
    (file that generates your addon's output)

Remember all these files are in your folder in the addons section not in the base roster directory.


------------------
Optional files:
------------------
These are optional files as you do not need them unless you have additional data ie database tables additions, addition css styles, or optional translated language files for your addon.  Remember you have access to the current roster language files, css and conf data thru addons.php extension.

conf.php
    (this will hold any addition config data that you need with out having to add to roster config)

default.css
    (the name 'default' is actually the same as the variable $roster_conf['template'] in roster config)

localization.php
    (this will hold all your language files so that someone can translate to another langage with out having to mess with your script)

Remember all these files are in your folder in the addons section not in the base roster directory.


----------------------------------
Breaking down the addon
	- menu.php  (Required)
----------------------------------

<?php

$config['menu_name'] = 'Dummy Page';    <- This is just a general name and can be called anything, as it is used in the array, I generally use the name of the addon.

$config['menu_min_user_level'] = 0;     <- Do not change, its for a future use :)

$config['menu_index_file'] = array();   <- Do not change, EVER

$config['menu_index_file'][0][0] = '&amp;display_text=1';  // request query variables delimited by &amp;
$config['menu_index_file'][0][1] = 'Dummy Link 1';         // menu link text


$config['menu_index_file'][1][0] = '&amp;display_text=1&amp;display_image=1';    <- or leave blank if you dont need to call additional data
$config['menu_index_file'][1][1] = 'Dummy Link 2';


?>


 Pretty simple huh?
 Remember do not change any of the array number or anything as really all you should change is the ['menu_name'] and then index and addon menu name as above and you are all set.



--------------------------------------------
Breaking down the addon
	- index.php  (Required)
--------------------------------------------

<?php
/* 
* $Date: 2006/01/15 22:52:16 $ 
* $Revision: 1.8 $ 
*/ 


if (eregi("index.php",$_SERVER['PHP_SELF'])) {		// Add this to all your files so they can't be accessed directly
    die("You can't access this file directly!");
}


// example connect
$server_name_escape = $wowdb->escape($server_name);
$server = $_REQUEST['server'];
$guild_name_escape = $wowdb->escape($guild_name);
$query = "SELECT guild_id, guild_name, DATE_FORMAT(update_time, '".$timeformat[$lang]."') from `".ROSTER_GUILDTABLE."` where guild_name= '$guild_name_escape' and server='$server_name_escape'";
$result = mysql_query($query) or die(mysql_error());
if ($row = mysql_fetch_row($result)) {
	$guildId = $row[0];
	$guildname = $row[1];
	$updateTime = $row[2];
	$content .= "<!--$guildId $updateTime-->\n";
} else {
	die("Could not find guild:'$guild_name' for server '$server_name'. You need to load your guild first and make sure you finished configuration.");
}

if ($sqldebug) {
	$content .= "<!--$query $sqldebug-->\n";
}


$display_text = $_REQUEST['display_text'];
$display_image = $_REQUEST['display_image'];

//begin generation the addon's output
$content .= '<br>';

if ($generate_output){
	if ($display_text) {
		$content .=	"Your guild Id is [ <b>$guildId</b> ] for Guild: [ <b>$guildname</b> ] .";
		$content .= '<br>';
	}
	if ($display_image){
		$content .="<div class='dummyStyle' >".$wordings[$roster_lang]['dummy']."<br><img src='./img/mini_diablo.gif'></div>\n";
		$content .= '<br>';
	}
}

$content .= '<br>';
?>

This file has access to all of the roster variables that you can use for your site, you notice it does not call your conf.php, roster's conf.php, or default.css, that is because they are already called with addon.php.


So now we have taken all of these files, combined them into index.php for the roster look, database info and translations.  Here is were all the meat and gravy is done.  From here you should have a working knowledge of what all is going one and should help you mod your addon to fit the roster base correctly without having a 3rd party have to modify the base files.



--------------------------
Breaking down the addon
	- config.php  (Optional)
--------------------------
<?php

/*
	Whatever configuration for your addon you need
	Try to follow this format to reduce the chance
	that overwritting could occur
		$addon_conf['addon_name']['variable_name'] = 1;
*/

// The following is an "example conf.php" file

/*

//------[ Show Debug? ]------------
	$addon_conf['dummy']['debug'] = 1;


// Update Triggers config
	$addon_conf['dummy']['trigger_1'] = 1;		// Save data
	$addon_conf['dummy']['trigger_2'] = 0;		// Make image

*/

	// Made By dummy configuration
	$display_dummy_text = 1;			//dummy text display ( 1 on | 0 off)

*/
	// Database prefixes

define('ROSTER_DUMMYTABLE',$db_prefix.'dummy');


?>

Any custom configs like configs for turning something off can be placed here
Notice the "// Update Triggers config"?
  This is so you can control update_triggers, more on that below

If your script includes new tables dont forget to define the prefixes incase someone wants to add a prefix to your addon all they have to define it here and use the prefix in your queries

Example:  $query = "SELECT guild_id, guild_name, DATE_FORMAT(update_time, '".$timeformat[$lang]."') from `".ROSTER_GUILDTABLE."` where guild_name= '$guild_name_escape' and server='$server_name_escape'";

Please easy huh, if I am loosing you, mostly likey you should stop programing now and play WOW!


--------------------------
Breaking down the addon
	- localization.php   (Optional)
--------------------------

<?php

$wordings['deDE']['dummy'] = 'Der gr&uuml;ne Rand wird &uuml;ber das Stylesheet des Addons gesetzt. Die Variable $template bestimmt, welche CSS-Datei genutzt wird. (Optional)';  // German language file
$wordings['enUS']['dummy'] = 'Green border set via the addon\'s stylesheet, the new $template variable determines which stylesheet to use. Entirely Optional of course.';  // English Language file

$wordings['deDE']['dummyLink1'] = 'Beispiel Addon 1';
$wordings['enUS']['dummyLink1'] = 'Dummy Link 1';

$wordings['deDE']['dummyLink2'] = 'Beispiel Addon 2';
$wordings['enUS']['dummyLink2'] = 'Dummy Link 2';


?>

Here is our localization file
Note: this is used in translating any text in your addon if you want to support mutilangages.
As you can see we have a file for deDE which is the German language, and enUS which is the English langage.
See how easy that is, in the next few files we will show you some example of how you can include this in your scripts.


As you see you have deDE and enUS that we currently support, these are taken out of character profiler based on what region of WOW they are using.
When placing them in your script you can use something similar to this


$header_title = $wordings[$roster_lang]['dummy'];  // loc file for dummy file example

now what this does is once you have the settings that we discuss later, it will search the players database for the field `clientLocale` and pull if they have deDE or enUS thus picking the correct translation.  Also remember to rest of the local files are added from the roster conf.php so you only have to add the stuff that is custom to your site, the rest already in our localization.php, so if you need to check to make sure we have not already have a translation, you can open our file at localization/enUS.php to see the default stuff that you dont have have to duplicate.


---------------------------
Breaking down the addon
	- default.css (optional)   
---------------------------


/* EXAMPLE FILE ONLY FOR THE DUMMY PAGE */

.dummyStyle
{

	border: 30px green solid;
}

I assume you know what css is


--------------------------
Breaking down the addon
	- trigger.php  (Optional)
--------------------------
<?php
if( eregi('trigger.php',$_SERVER['PHP_SELF']) )
{
	die("You can't access this file directly!");
}

/*
	Start the following scripts when "update.php" is called

	Available variables
		- $member_id   = character id form the database ( ex. 24 )
		- $member_name = character's name ( ex. 'Jonny Grey' )
		- $roster_dir  = full url to roster directory with NO ending slash ( ex. 'http://yoursite.com/roster' )
		- $mode        = when you want to run the trigger
			= 'char'  - during a character update
			= 'guild' - during a guild update

	You may need to do some fancy coding if you need more variables

	Just print any needed output

*/
//----------[ INSERT UPDATE TRIGGER BELOW ]-----------------------


include('conf.php');

if( $mode == 'char' )
{
	if( $addon_conf['dummy']['trigger_1'] )
	{
		print "<span style=\"color: #0000FF;\">This is a character update for trigger 1</span><br />\n";
	}

	if( $addon_conf['dummy']['trigger_2'] )
	{
		print "<span style=\"color: #0000FF;\">This is a character update for trigger 2</span><br />\n";
	}
}

if( $mode == 'guild' )
{
	if( $addon_conf['dummy']['trigger_1'] )
	{
		print "<span style=\"color: #0000FF;\">This is a guild update for trigger 1</span><br />\n";
	}

	if( $addon_conf['dummy']['trigger_2'] )
	{
		print "<span style=\"color: #0000FF;\">This is a guild update for trigger 2</span><br />\n";
	}
}


?>

This file ties into "admin/update.php", the file that updates character/guild info
If you need something to happen when a member updates, this is where you put that code
You can update a table in the database, output text, generate images to save on the server disk (Like with zanix's SigGen)

All the dummy example does is output "This is a ( character | guild ) update for trigger ( 1 | 2 )"

For a more advanced example, check out the trigger file form zanix's SigGen addon


---------------------------------
- Variable calls from addons.php
---------------------------------
These are added to index.php for some additional support

If you add these into index.php you can turn off the header, footer and menu on the page, by default these are always on.
 - $roster_show_header = false;  // Turn off roster header
 - $roster_show_menu = false;    // Turn off roster menu
 - $roster_show_footer = false;  // Turn off roster footer


Pass ALL of your output to this variable instead of echo or print
Any output need to be buffered and addons.php will output it for you
You will see this above in the index.php example
NOTE: Make sure you use .= instead of = . Using = will destroy any previous content in $content
 - $content .= 



---------------------------------------------------------------------------------------------------------------

Congrats, you are all done!
With this framework you will be able to test and have your end users just drop your files in the addons folder with out having to mod or touch any files in the roster base files and you will no longer have to worry about each update breaking your addon later in the future.